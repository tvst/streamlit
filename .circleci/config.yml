# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
workflows:
  version: 2
  circleci:
    jobs:
      - python-3.7.4
      - python-2.7.16:
          requires:
            - python-3.7.4
      - cypress-approval:
          type: approval
          requires:
            - python-3.7.4
      - cypress:
          requires:
            - cypress-approval

jobs:
  python-3.7.4: &job-template
    docker:
      - image: circleci/python:3.7.4-stretch

    working_directory: ~/repo

    steps:
      - checkout:
          name: Checkout Streamlit code

      #################################################################
      # Pre Cache Steps
      #################################################################
      - run: &get_make_checksum
          name: Get 'make' checksum
          command: |
            echo 'export SUDO="sudo"' >> $BASH_ENV
            cp -f /usr/bin/make make.bin
            md5sum make.bin > ~/make.md5

      - run: &get_dot_checksum
          name: Get 'dot' checksum
          command: |
            if [ -f /usr/bin/dot ] ; then
              cp -f /usr/bin/dot dot.bin
              md5sum dot.bin > ~/dot.md5
            else
              touch dot.bin
              md5sum dot.bin > ~/dot.md5
              rm -f dot.bin
            fi

      - run:
          # We use the python Pipfile.lock as the cache key and also
          # the hash of the current python.
          # If dependencies haven't changed then use the cache.
          name: Create Python cache key
          command: |
            md5sum lib/Pipfile.locks/${CIRCLE_JOB} > ~/python_version.md5
            md5sum $(which python) >> ~/python_version.md5

      - run: &create_yarn_cache_key
          name: Create Yarn cache key
          command: |
            md5sum frontend/yarn.lock > ~/yarn.lock.md5

      - run:
          # There is no lock file for the protobufs so we run a checksum
          # across all the protos and save that to a file to use as
          # cache key.
          name: Checksum all protobufs
          command: |
            md5sum proto/streamlit/proto/*.proto $(which python) > ~/protobuf.md5

      #################################################################
      # Restore from cache
      #################################################################
      - restore_cache: &restore_virtualenv
          name: Restore virtualenv from cache
          keys:
            - v12-python-venv-{{ checksum "~/python_version.md5" }}

      - restore_cache: &restore_nvm
          name: Restore nvm and node_modules from cache
          keys:
            - v12-nvm_node_modules-{{ checksum "~/yarn.lock.md5" }}

      - restore_cache:
          name: Restore protobufs from cache
          keys:
            - v12-protobuf-{{ checksum "~/protobuf.md5" }}

      - restore_cache: &restore_make
          name: Restore make from cache
          keys:
            - v12_make.bin-{{ checksum "~/make.md5" }}

      - restore_cache: &restore_dot
          name: Restore dot from cache
          keys:
            - v12_dot.bin-{{ checksum "~/dot.md5" }}

      #################################################################
      # Pre Make commands
      #################################################################
      - run: &install_make
          name: Install make
          command: |
            if [ -s make.bin ] ; then
              echo "make.bin exists; not installing"
            else
              echo "/usr/bin/make doesn't exist; installing"
              apt-get update -y
              apt-get install -y make
              cp -f /usr/bin/make make.bin
            fi
            ${SUDO} cp -f make.bin /usr/bin/make

      - save_cache:
          name: Save make to cache
          key: v12_make.bin-{{ checksum "~/make.md5" }}
          paths:
            - make.bin

      - run: &install_dot
          name: Install dot
          command: |
            if [ -s dot.bin ] ; then
              echo "dot.bin exists and is non zero"
            else
              echo "/usr/bin/dot doesn't exist, installing"
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y graphviz
              cp -f /usr/bin/dot dot.bin
            fi
            ${SUDO} cp -f dot.bin /usr/bin/dot

      - save_cache:
          name: Save dot to cache
          key: v12_dot.bin-{{ checksum "~/dot.md5" }}
          paths:
            - dot.bin

      #################################################################
      # Run 'make init'
      #################################################################
      - run: &install_nodejs
          name: Install NVM, Node.js, and Yarn
          command: |
            if [ ! -d ~/.nvm ] ; then
              # install nodejs via nvm
              curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
              source "$HOME/.nvm/nvm.sh"
              nvm install --lts=dubnium
              # install yarn
              npm install -g yarn
            fi
            if [ ! -d frontend/node_modules ] ; then
              source "$HOME/.nvm/nvm.sh"
            fi
            make react-init scssvars
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo 'source "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run: &activate_virtualenv
          name: Run make pipenv-lock and create virtualenv
          command: |
            echo 'Checking for virtualenv'
            if [ ! -d venv ] ; then
              if [ "${CIRCLE_JOB}" == "python-2.7.16" ] ; then
                pip install virtualenv
                python -m virtualenv venv
              else
                python -m venv venv
              fi
              source venv/bin/activate
              make setup
              make pipenv-lock
              deactivate
            else
              echo 'Virtualenv already exists, not creating'
            fi
            echo 'source venv/bin/activate' >> $BASH_ENV

      - run: &make_develop
          name: Run make develop
          command: |
            make develop

      - run: &generate_protobufs
          name: Generate protobufs
          command: |
            # There's a chance this file could be a cached version when
            # the protobuf cache is restored, so checkout from github to
            # make sure.
            git checkout -- lib/streamlit/proto/__init__.py
            if [ ! -e frontend/src/autogen/proto.js -o ! -e lib/streamlit/proto/DataFrame_pb2.py ] ; then
              # install protobuf v3
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y gnupg
              echo "deb http://ppa.launchpad.net/maarten-fonville/protobuf/ubuntu trusty main" | ${SUDO} tee /etc/apt/sources.list.d/protobuf.list
              ${SUDO} apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4DEA8909DC6A13A3
              ${SUDO} apt-get update -y
              ${SUDO} apt-get install -y protobuf-compiler
              make protobuf
            fi

      #################################################################
      # Run linters
      #################################################################
      - run:
          name: Run linters
          command: |
            make jslint
            make pylint

      - store_test_results:
          path: frontend/test-reports
          when: always

      #################################################################
      # Run make pycoverage
      #################################################################
      - run:
          name: Run python tests
          command: |
            make pycoverage

      - store_test_results:
          path: lib/test-reports
          when: always

      #################################################################
      # Run integration tests
      #################################################################
      - run:
          name: Run integration tests
          command: |
            make integration-tests

      #################################################################
      # Run frontend tests. (Only executed in the Python 3 job.)
      #################################################################
      - run:
          name: Run frontend tests
          command: |
            if [ "${CIRCLE_JOB}" == "python-2.7.16" ] ; then
              echo "Not running frontend tests because our job is ${CIRCLE_JOB}"
            else
              make jstest
            fi

      #################################################################
      # Save cache for python virtualenv, node_modules, protobuf
      #################################################################

      - save_cache:
          name: Save virtualenv to cache
          key: v12-python-venv-{{ checksum "~/python_version.md5" }}
          paths:
            - venv

      - save_cache:
          name: Save nvm and node_modules to cache
          key: v12-nvm_node_modules-{{ checksum "~/yarn.lock.md5" }}
          paths:
            - ~/.nvm
            - ~/.cache

      - save_cache:
          name: Save generated protobufs to cache
          key: v12-protobuf-{{ checksum "~/protobuf.md5" }}
          paths:
            - frontend/src/autogen/proto.js
            - lib/streamlit/proto

  # The 'python-2.7.16' job inherits everything from the Python 3 job.
  # In a few cases, there are steps that are conditionally skipped based
  # on the name of the current job (see, e.g., "Run frontend tests").
  # If the python-2.7.16 job name is changed, please also find and replace
  # any relevant strings that reference it by name!
  python-2.7.16:
    <<: *job-template
    docker:
      - image: circleci/python:2.7.16-stretch

  cypress:
    docker:
      - image: circleci/python:3.7.4-stretch

    working_directory: ~/repo

    steps:
      - checkout:
          name: Checkout Streamlit code

      #################################################################
      # Pre Cache Steps
      #################################################################
      - run:
          <<: *get_make_checksum

      - run:
          <<: *get_dot_checksum

      - run:
          name: Create python cache key.
          command: |
            md5sum lib/Pipfile.locks/python-3.7.4 > ~/python_version.md5
            md5sum $(which python) >> ~/python_version.md5

      - run:
          <<: *create_yarn_cache_key

      #################################################################
      # Restore from cache
      #################################################################
      - restore_cache:
          <<: *restore_virtualenv

      - restore_cache:
          <<: *restore_nvm

      - restore_cache:
          <<: *restore_make

      - restore_cache:
          <<: *restore_dot

      #################################################################
      # Pre Make commands
      #################################################################
      - run:
          <<: *install_make

      - run:
          <<: *install_dot

      - run:
          <<: *install_nodejs

      - run:
          <<: *activate_virtualenv

      - run:
          <<: *make_develop

      # NOTE restore protobuf from cache wasn't
      # working so generating protobufs instead.
      - run:
          <<: *generate_protobufs

      - run:
          name: Make SCSS vars
          command: |
            make scssvars

      - run:
          name: Install Cypress dependencies
          command: |
            ${SUDO} apt-get install -y xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2

      - run:
          name: Cypress
          command: |
            mkdir ~/.streamlit
            echo '[general]' >  ~/.streamlit/credentials.toml
            echo 'email = "test@streamlit.io"' >> ~/.streamlit/credentials.toml
            cd frontend
            yarn run cy:serve-and-run-all

      - store_test_results:
          path: frontend/test-reports
          when: always

      - store_artifacts:
          path: frontend/mochawesome-report

      - store_artifacts:
          path: frontend/cypress/videos

      - store_artifacts:
          path: frontend/cypress/snapshots
